// lib/firebase.tsimport { Platform } from 'react-native';import * as Notifications from 'expo-notifications';import Constants from 'expo-constants';// React Native Firebase imports (Android only) - v22+ modular APIimport { getApp } from '@react-native-firebase/app';import { getAnalytics, logEvent as rnLogEvent, setAnalyticsCollectionEnabled, setUserId, setUserProperties } from '@react-native-firebase/analytics';// Android-only Firebase configuration - matches google-services.json// No web configuration needed - only for Android platformconst androidFirebaseConfig = {  appId: "1:775891172931:android:cfef55abc675f95bb61ef6", // Android app ID from google-services.json  messagingSenderId: "775891172931",  measurementId: "G-T8TWHK9S63",};// Global analytics instancelet analyticsInstance: any = null;// Initialize Firebase - Android Onlyexport const initFirebase = async () => {  if (Platform.OS !== 'android') {    return;  }  try {    // Get Firebase app instance and analytics using modular API    const app = getApp();    analyticsInstance = getAnalytics(app);    // Enable Analytics collection explicitly    await setAnalyticsCollectionEnabled(analyticsInstance, true);    // Set debug mode properties    if (__DEV__) {      await setUserProperties(analyticsInstance, {        debug_mode: 'enabled',        environment: 'development',        app_name: 'nexeed'      });      }    // Log initial app launch event    const sessionId = Date.now().toString();    const launchEventParams = {      platform: Platform.OS,      timestamp: new Date().toISOString(),      app_version: Constants.expoConfig?.version || '1.0.0',      session_id: sessionId,      initialization_time: new Date().getTime()    };    rnLogEvent(analyticsInstance, 'app_launch', launchEventParams);    // Send initialization success event    rnLogEvent(analyticsInstance, 'firebase_init_success', {      timestamp: new Date().toISOString(),      session_id: sessionId    });    } catch (error) {    }};/** * Request push notification permissions and get Expo push token. */export const registerForPushNotificationsAsync = async (): Promise<string | undefined> => {  if (!Constants.isDevice) {    return;  }  const { status: existingStatus } = await Notifications.getPermissionsAsync();  let finalStatus = existingStatus;  if (existingStatus !== 'granted') {    const { status } = await Notifications.requestPermissionsAsync();    finalStatus = status;  }  if (finalStatus !== 'granted') {    return;  }  const tokenData = await Notifications.getExpoPushTokenAsync();  return tokenData.data;};// Get analytics instanceconst getAnalyticsInstance = () => {  if (!analyticsInstance && Platform.OS === 'android') {    try {      const app = getApp();      analyticsInstance = getAnalytics(app);    } catch (error) {      return null;    }  }  return analyticsInstance;};// Analytics Helper Functions - Android Onlyexport const trackEvent = async (eventName: string, parameters?: Record<string, any>) => {  if (Platform.OS !== 'android') {    return;  }  const analytics = getAnalyticsInstance();  if (!analytics) {    return;  }  const eventParams = {    ...parameters,    platform: Platform.OS,    timestamp: new Date().toISOString(),    app_version: Constants.expoConfig?.version || '1.0.0',    event_id: `${eventName}_${Date.now()}`  };  try {    await setAnalyticsCollectionEnabled(analytics, true);    rnLogEvent(analytics, eventName, eventParams);    } catch (error) {    }};// Predefined event tracking functionsexport const trackUserLogin = async (method: string = 'email') => {  await trackEvent('login', { method });};export const trackUserRegister = async (method: string = 'email') => {  await trackEvent('sign_up', { method });};export const trackPostCreate = async (postType: string = 'text') => {  await trackEvent('post_create', { content_type: postType });};export const trackPostView = async (postId: string) => {  await trackEvent('select_content', {     content_type: 'post',    item_id: postId   });};export const trackChatOpen = async (chatId: string) => {  await trackEvent('select_content', {     content_type: 'chat',    item_id: chatId   });};export const trackMessageSent = async (chatId: string) => {  await trackEvent('message_sent', {     chat_id: chatId   });};export const trackUserFollow = async (followedUserId: string) => {  await trackEvent('follow_user', {     followed_user_id: followedUserId   });};export const trackScreenView = async (screenName: string) => {  await trackEvent('screen_view', {     screen_name: screenName   });};export const trackSearch = async (searchTerm: string, resultCount: number = 0) => {  await trackEvent('search', {     search_term: searchTerm,    result_count: resultCount   });};