// Deleted notification services - using clean FCM nowimport { apiService } from './api';import { initializeFCM, getFCMToken, removeFCMToken, isFCMSupported } from './fcm';// Notification config removed - using clean FCM nowimport * as Notifications from 'expo-notifications';// Configure notification behaviorNotifications.setNotificationHandler({  handleNotification: async () => ({    shouldShowAlert: true,    shouldPlaySound: true,    shouldSetBadge: true,    shouldShowBanner: true,    shouldShowList: true,  }),});class AppInitialization {  private isInitialized = false;  async initialize() {    if (this.isInitialized) {      return;    }    try {      // Load auth token from storage      await apiService.loadAuthTokenFromStorage();      // Warm up server to prevent cold start delays      apiService.warmUpServer(); // Non-blocking warm-up      // Notification channels setup removed - clean FCM handles this      // Initialize FCM if supported      if (isFCMSupported()) {        initializeFCM();      } else {        }      // Push notifications setup removed - clean FCM handles this      // Real-time notification service removed - clean FCM handles this      // User-specific notifications handled by clean FCM      if (apiService.userId) {        // Get FCM token for authenticated user (only if FCM is supported)        if (isFCMSupported()) {          await getFCMToken();        }      }      this.isInitialized = true;      } catch (error) {      // Don't throw - allow app to continue with reduced functionality    }  }  async onUserLogin(userId: string) {    try {      // Get FCM token for the logged-in user (only if FCM is supported)      if (isFCMSupported()) {        await getFCMToken();      }      // Push notifications for user removed - clean FCM handles this      // Real-time notifications for user removed - clean FCM handles this      } catch (error) {      }  }  async onUserLogout() {    try {      // Remove FCM token from backend (only if FCM is supported)      if (isFCMSupported()) {        await removeFCMToken();      }      // Real-time notifications cleanup removed - clean FCM handles this      } catch (error) {      }  }}export const appInitialization = new AppInitialization();