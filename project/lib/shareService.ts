// lib/shareService.ts - Professional Deep Linking Share Solutionimport { Alert, Share as RNShare, Clipboard, Platform } from 'react-native';import * as Linking from 'expo-linking';export class ShareService {  // Generate post share links (app + web fallback + Play Store)  static generatePostShareLink(postId: string): { appLink: string; webLink: string; playStoreLink: string } {    return {      appLink: `boltnexeed://post/${postId}`,      webLink: `https://nexeed.app/post/${postId}`,      playStoreLink: `https://play.google.com/store/apps/details?id=com.mycompany.nexeed1`    };  }  // Professional share with app, web, and Play Store links  static async sharePost(postId: string, username: string, content?: string): Promise<boolean> {    try {      const { appLink, webLink, playStoreLink } = this.generatePostShareLink(postId);      // Create a professional share message with all links      let shareMessage = `Check out this post by @${username} on Nexeed! 🚀\n\n`;      if (content) {        const preview = content.length > 80 ? content.substring(0, 80) + '...' : content;        shareMessage += `"${preview}"\n\n`;      }      // Add clickable links with clear instructions      shareMessage += `📱 Open in Nexeed App (if installed):\n${appLink}\n\n`;      shareMessage += `🌐 View in Browser:\n${webLink}\n\n`;      shareMessage += `📲 Download Nexeed App:\n${playStoreLink}`;      const result = await RNShare.share({        message: shareMessage,        title: 'Share Nexeed Post',        url: appLink // Primary link for sharing      });      if (result.action === RNShare.sharedAction) {        if (result.activityType) {          }        return true;      }      return false;    } catch (error) {      Alert.alert('Share Error', 'Failed to share post. Please try again.');      return false;    }  }  // Copy post link with app, web, and Play Store options  static async copyPostLink(postId: string): Promise<boolean> {    try {      const { appLink, webLink, playStoreLink } = this.generatePostShareLink(postId);      // Show options for which link to copy      return new Promise((resolve) => {        Alert.alert(          '📋 Copy Link',          'Choose which link to copy:',          [            {              text: '📱 App Link',              onPress: async () => {                await Clipboard.setString(appLink);                Alert.alert(                  '✅ App Link Copied!',                  `App link copied to clipboard:\n${appLink}\n\nThis will open directly in the Nexeed app.`,                  [{ text: 'OK' }]                );                resolve(true);              }            },            {              text: '🌐 Web Link',              onPress: async () => {                await Clipboard.setString(webLink);                Alert.alert(                  '✅ Web Link Copied!',                  `Web link copied to clipboard:\n${webLink}\n\nThis will open in any browser.`,                  [{ text: 'OK' }]                );                resolve(true);              }            },            {              text: '📲 Play Store Link',              onPress: async () => {                await Clipboard.setString(playStoreLink);                Alert.alert(                  '✅ Play Store Link Copied!',                  `Play Store link copied to clipboard:\n${playStoreLink}\n\nThis will open the app download page.`,                  [{ text: 'OK' }]                );                resolve(true);              }            },            {              text: 'Cancel',              style: 'cancel',              onPress: () => resolve(false)            }          ]        );      });    } catch (error) {      Alert.alert('Error', 'Failed to copy link');      return false;    }  }  // Test deep link functionality (for debugging)  static async testPostLink(postId: string): Promise<void> {    try {      const { appLink, webLink } = this.generatePostShareLink(postId);      Alert.alert(        '🧪 Test Deep Links',        `Testing links for post ${postId}`,        [          {            text: '📱 Test App Link',            onPress: async () => {              try {                const canOpen = await Linking.canOpenURL(appLink);                if (canOpen) {                  await Linking.openURL(appLink);                  } else {                  Alert.alert(                    'Test Result',                    `App Link: ${appLink}\n\nThe app cannot open its own deep links directly.\n\nThis is normal! The link will work when:\n• Shared via WhatsApp/SMS\n• Opened from another app\n• Triggered via ADB command`                  );                }              } catch (error) {                Alert.alert(                  'Test Info',                  `App Link: ${appLink}\n\nDirect self-opening not supported.\n\nUse ADB to test:\nadb shell am start -W -a android.intent.action.VIEW -d "${appLink}" com.mycompany.nexeed1`                );              }            }          },          {            text: '🌐 Test Web Link',            onPress: async () => {              try {                const canOpen = await Linking.canOpenURL(webLink);                if (canOpen) {                  await Linking.openURL(webLink);                  } else {                  Alert.alert('Test Result', `Cannot open web link: ${webLink}`);                }              } catch (error) {                Alert.alert('Test Error', `Failed to open web link: ${error.message}`);              }            }          },          {            text: '📋 Copy Links',            onPress: () => this.copyPostLink(postId)          },          { text: 'Cancel', style: 'cancel' }        ]      );    } catch (error) {      Alert.alert('Test Error', `Failed to test: ${error.message}`);    }  }  // Quick share - single tap solution with improved message  static async quickShare(postId: string, username: string, content?: string) {    try {      const { appLink, webLink, playStoreLink } = this.generatePostShareLink(postId);      // Create an optimized share message for quick sharing      let shareMessage = `🚀 Check out this post by @${username} on Nexeed!\n\n`;      if (content) {        const preview = content.length > 60 ? content.substring(0, 60) + '...' : content;        shareMessage += `"${preview}"\n\n`;      }      // Simplified format for quick sharing      shareMessage += `📱 Open in app: ${appLink}\n`;      shareMessage += `🌐 View online: ${webLink}\n`;      shareMessage += `📲 Get the app: ${playStoreLink}`;      const result = await RNShare.share({        message: shareMessage,        title: `Post by @${username}`,        url: appLink      });      return result.action === RNShare.sharedAction;    } catch (error) {      Alert.alert('Share Error', 'Failed to share post. Please try again.');      return false;    }  }  // Simple copy function that just copies the app link  static async copyAppLink(postId: string): Promise<boolean> {    try {      const { appLink } = this.generatePostShareLink(postId);      await Clipboard.setString(appLink);      Alert.alert(        '✅ Link Copied!',        `App link copied: ${appLink}\n\nPaste this link anywhere to share the post. It will open directly in the Nexeed app.`,        [{ text: 'OK' }]      );      return true;    } catch (error) {      Alert.alert('Error', 'Failed to copy link');      return false;    }  }  // Show comprehensive share options menu  static showShareOptions(postId: string, username: string, content?: string) {    Alert.alert(      '📤 Share Post',      'Choose how to share this post:',      [        {          text: '📱 Share to Apps',          onPress: () => this.sharePost(postId, username, content)        },        {          text: '📋 Copy App Link',          onPress: () => this.copyAppLink(postId)        },        {          text: '🔗 Copy Options',          onPress: () => this.copyPostLink(postId)        },        {          text: '🧪 Test Links',          onPress: () => this.testPostLink(postId)        },        {          text: '🔍 Debug Notifications',          onPress: () => this.debugNotifications()        },        {          text: '🔍 Debug FCM System',          onPress: () => this.debugFCMSystem()        },        {          text: '🔄 Force Reconnect Socket',          onPress: () => this.forceReconnectSocket()        },        {          text: '🧪 Test Notification',          onPress: () => this.testNotification()        },        {          text: '📱 Test Clean FCM',          onPress: () => this.testCleanFCM()        },        {          text: '🔧 Test Notification Tap',          onPress: () => this.testNotificationTap()        },        {          text: 'Cancel',          style: 'cancel'        }      ]    );  }  // Generate profile share links  static generateProfileShareLink(userId: string): { appLink: string; webLink: string; playStoreLink: string } {    return {      appLink: `boltnexeed://profile/${userId}`,      webLink: `https://nexeed.app/profile/${userId}`,      playStoreLink: `https://play.google.com/store/apps/details?id=com.mycompany.nexeed1`    };  }  // Share profile with app, web, and Play Store links  static async shareProfile(userId: string, username: string): Promise<boolean> {    try {      const { appLink, webLink, playStoreLink } = this.generateProfileShareLink(userId);      let shareMessage = `Check out @${username}'s profile on Nexeed! 🚀\n\n`;      shareMessage += `📱 Open in Nexeed App:\n${appLink}\n\n`;      shareMessage += `🌐 View in Browser:\n${webLink}\n\n`;      shareMessage += `📲 Download Nexeed App:\n${playStoreLink}`;      const result = await RNShare.share({        message: shareMessage,        title: 'Share Nexeed Profile',        url: appLink      });      return result.action === RNShare.sharedAction;    } catch (error) {      Alert.alert('Share Error', 'Failed to share profile. Please try again.');      return false;    }  }  // TEMPORARY: Debug notification system  static async debugNotifications(): Promise<void> {    try {      const { fcmService } = await import('./fcmService');      await fcmService.debugNotificationSystem();      // Also debug socket service user ID      const { socketService } = await import('./socketService');      const currentUserId = socketService.getCurrentUserId();      // Background socket service removed - using clean FCM now      // Check AsyncStorage for user data      const AsyncStorage = await import('@react-native-async-storage/async-storage');      const userData = await AsyncStorage.default.getItem('userData');      const authData = await AsyncStorage.default.getItem('authData');      Alert.alert(        '🔍 Notification Debug',        `Check console logs for:\n• FCM status\n• Socket user ID: ${currentUserId}\n• Background socket: Removed\n• Using clean FCM service now\n• Test notification should appear`,        [{ text: 'OK' }]      );    } catch (error) {      Alert.alert('Debug Error', `Failed to debug notifications: ${error.message}`);    }  }  // TEMPORARY: Force reconnect socket (using regular socket service now)  static async forceReconnectSocket(): Promise<void> {    try {      const { socketService } = await import('./socketService');      // Disconnect and reconnect the socket      socketService.disconnect();      await socketService.connect();      Alert.alert(        '🔄 Socket Reconnected',        'Socket service has been reconnected. Check console logs for status.',        [{ text: 'OK' }]      );    } catch (error) {      Alert.alert('Reconnect Error', `Failed to reconnect socket: ${error.message}`);    }  }  // TEMPORARY: Test notification system  static async testNotification(): Promise<void> {    try {      const Notifications = await import('expo-notifications');      const result = await Notifications.scheduleNotificationAsync({        content: {          title: '🧪 Test Chat Notification',          body: 'This is a test message notification',          data: {            type: 'message',            test: true          },          sound: true,          priority: Notifications.AndroidNotificationPriority.HIGH,        },        trigger: null // Show immediately      });      Alert.alert(        '🧪 Test Notification',        `Test notification sent with ID: ${result}. Check if it appears on your device.`,        [{ text: 'OK' }]      );    } catch (error) {      Alert.alert('Test Error', `Failed to send test notification: ${error.message}`);    }  }  // Debug FCM System  static async debugFCMSystem(): Promise<void> {    try {      // Import and debug FCM service      const { fcmService } = await import('./fcmService');      await fcmService.debugNotificationSystem();      Alert.alert(        '🔍 FCM Debug Complete',        'Check console logs for detailed FCM system information. A test notification should also appear.',        [{ text: 'OK' }]      );    } catch (error) {      Alert.alert('❌ FCM Debug Failed', `Error: ${error}`);    }  }  // Test notification tap handling  static async testNotificationTap(): Promise<void> {    try {      // Import and test FCM service      const { fcmService } = await import('./fcmService');      // Simulate notification tap with test data      const testNotificationData = {        type: 'message',        chatId: 'test-chat-123',        senderId: 'test-user-456',        username: 'TestUser'      };      // Test the notification press handler directly      fcmService.testNotificationPress(testNotificationData);      Alert.alert(        '🔧 Notification Tap Test',        'Simulated notification tap. Check console logs and see if navigation works.',        [{ text: 'OK' }]      );    } catch (error) {      Alert.alert('❌ Test Failed', `Error: ${error}`);    }  }  // TEMPORARY: Test Clean FCM system  static async testCleanFCM(): Promise<void> {    try {      Alert.alert('✅ FCM Test', 'FCM system test initiated. Check console logs for details.');    } catch (error) {      Alert.alert('❌ FCM Test Failed', `Error: ${error}`);    }  }}