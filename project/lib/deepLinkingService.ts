// lib/deepLinkingService.tsimport * as Linking from 'expo-linking';import { router } from 'expo-router';export interface DeepLinkConfig {  scheme: string;  hostname?: string;  path: string;  queryParams?: Record<string, string>;}export class DeepLinkingService {  private static instance: DeepLinkingService;  private isInitialized = false;  static getInstance(): DeepLinkingService {    if (!DeepLinkingService.instance) {      DeepLinkingService.instance = new DeepLinkingService();    }    return DeepLinkingService.instance;  }  // Initialize deep linking listeners  async initialize() {    if (this.isInitialized) return;    try {      // Handle initial URL (cold start)      const initialUrl = await Linking.getInitialURL();      if (initialUrl) {        setTimeout(() => this.handleDeepLink(initialUrl), 1000);      }      // Handle URL changes (warm start)      const subscription = Linking.addEventListener('url', (event) => {        this.handleDeepLink(event.url);      });      this.isInitialized = true;      return () => {        subscription?.remove();        this.isInitialized = false;      };    } catch (error) {      }  }  // Parse and handle incoming deep links  private handleDeepLink(url: string): boolean {    try {      const parsed = Linking.parse(url);      const { scheme, hostname, path, queryParams } = parsed;      // Handle nexeed://post/123 or boltnexeed://post/123      if ((scheme === 'nexeed' || scheme === 'boltnexeed') && path) {        return this.handleNexeedScheme(path, queryParams);      }      // Handle HTTPS deep links from various domains      if (scheme === 'https' && (        hostname === 'nexeed.app' ||         hostname === 'mynexeedapp.com' ||         hostname === 'nexeed-app.vercel.app'      )) {        return this.handleHttpsScheme(path, queryParams, hostname);      }      return false;    } catch (error) {      return false;    }  }  // Handle nexeed:// scheme  private handleNexeedScheme(path: string, queryParams?: any): boolean {    // nexeed://post/123    if (path.startsWith('post/')) {      const postId = path.replace('post/', '');      if (postId) {        this.navigateToPost(postId, queryParams);        return true;      }    }    // nexeed://profile/123    if (path.startsWith('profile/')) {      const userId = path.replace('profile/', '');      if (userId) {        this.navigateToProfile(userId);        return true;      }    }    return false;  }  // Handle https:// scheme  private handleHttpsScheme(path: string, queryParams?: any, hostname?: string): boolean {    // https://nexeed.app/post/123    if (path?.startsWith('/post/')) {      const postId = path.replace('/post/', '');      if (postId) {        this.navigateToPost(postId, queryParams);        return true;      }    }    // https://nexeed.app/share/123 (redirect format)    if (path?.startsWith('/share/')) {      const postId = path.replace('/share/', '');      if (postId) {        this.navigateToPost(postId, queryParams);        return true;      }    }    // https://nexeed.app/profile/123    if (path?.startsWith('/profile/')) {      const userId = path.replace('/profile/', '');      if (userId) {        this.navigateToProfile(userId);        return true;      }    }    return false;  }  // Navigate to post detail screen  private navigateToPost(postId: string, queryParams?: any) {    const params: any = {};    if (queryParams?.scrollToComments === 'true') {      params.scrollToComments = 'true';    }    if (queryParams?.fromNotification === 'true') {      params.fromNotification = 'true';    }    setTimeout(() => {      router.push({        pathname: `/post/${postId}`,        params      });    }, 100);  }  // Navigate to profile screen  private navigateToProfile(userId: string) {    setTimeout(() => {      router.push(`/profile/${userId}`);    }, 100);  }  // Generate shareable deep links  generatePostLink(postId: string): { appLink: string; webLink: string } {    return {      appLink: `nexeed://post/${postId}`,      webLink: `https://mynexeedapp.com/post/${postId}`    };  }  generateProfileLink(userId: string): { appLink: string; webLink: string } {    return {      appLink: `nexeed://profile/${userId}`,      webLink: `https://mynexeedapp.com/profile/${userId}`    };  }  // Test if app can handle deep links  async canHandleDeepLinks(): Promise<boolean> {    try {      const canOpenNexeed = await Linking.canOpenURL('nexeed://test');      return canOpenNexeed;    } catch (error) {      return false;    }  }}// Export singleton instanceexport const deepLinkingService = DeepLinkingService.getInstance();