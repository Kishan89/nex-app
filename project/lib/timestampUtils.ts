/** * Timestamp utility functions for consistent date/time handling across the app * Fixes timezone issues and provides consistent formatting */export interface TimestampOptions {  hour12?: boolean;  showDate?: boolean;  locale?: string;}/** * Parse a timestamp string and convert it to a Date object * Handles various timestamp formats including 12-hour format, ISO strings, and Unix timestamps */export const parseTimestamp = (timestamp: string | number): Date => {  if (typeof timestamp === 'number') {    return new Date(timestamp);  }  // If it's already in 12-hour format (e.g., "4:10 PM"), parse it properly  if (timestamp.includes('AM') || timestamp.includes('PM')) {    const today = new Date();    const [time, period] = timestamp.split(' ');    const [hours, minutes] = time.split(':');    let hour24 = parseInt(hours);    if (period === 'PM' && hour24 !== 12) hour24 += 12;    if (period === 'AM' && hour24 === 12) hour24 = 0;    today.setHours(hour24, parseInt(minutes), 0, 0);    return today;  }  // If timestamp is just time format without AM/PM (like "16:10"), assume it's today  if (timestamp.includes(':') && !timestamp.includes('T') && !timestamp.includes('Z')) {    const today = new Date();    const [hours, minutes] = timestamp.split(':');    today.setHours(parseInt(hours), parseInt(minutes), 0, 0);    return today;  }  // Try to parse as ISO string or other standard format  const date = new Date(timestamp);  if (!isNaN(date.getTime())) {    return date;  }  // If all else fails, try parsing as Unix timestamp  const numTimestamp = parseInt(timestamp);  if (!isNaN(numTimestamp)) {    return new Date(numTimestamp);  }  // Fallback to current time  return new Date();};/** * Format a timestamp for display in the user's local timezone * Automatically handles server UTC timestamps and converts them to local time */export const formatTimestamp = (  timestamp: string | number | Date,  options: TimestampOptions = {}): string => {  const {    hour12 = true,    showDate = false,    locale = 'en-US'  } = options;  try {    let date: Date;    if (timestamp instanceof Date) {      date = timestamp;    } else {      date = parseTimestamp(timestamp as string | number);    }    if (isNaN(date.getTime())) {      return 'Invalid time';    }    const now = new Date();    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);    // If showDate is true or the message is older than 24 hours, show date    if (showDate || Math.abs(diffInHours) > 24) {      return date.toLocaleDateString(locale, {        month: 'short',        day: 'numeric',        hour: 'numeric',        minute: '2-digit',        hour12      });    }    // Otherwise just show time    return date.toLocaleTimeString(locale, {      hour: 'numeric',      minute: '2-digit',      hour12    });  } catch (error) {    // Fallback to current time    return new Date().toLocaleTimeString(locale, {      hour: 'numeric',      minute: '2-digit',      hour12    });  }};/** * Format a timestamp for message display * Uses consistent formatting across the chat interface */export const formatMessageTime = (timestamp: string | number | Date): string => {  try {    // If timestamp is already in correct format (AM/PM), return as is    if (typeof timestamp === 'string' && (timestamp.includes('AM') || timestamp.includes('PM'))) {      // Validate it's a proper time format      const timeRegex = /^\d{1,2}:\d{2}\s?(AM|PM)$/i;      if (timeRegex.test(timestamp.trim())) {        return timestamp.trim();      }    }    // For other formats, convert to local time    let date: Date;    if (timestamp instanceof Date) {      date = timestamp;    } else if (typeof timestamp === 'number') {      date = new Date(timestamp);    } else {      // Try to parse the timestamp      date = parseTimestamp(timestamp);      if (isNaN(date.getTime())) {        // If parsing fails, return current time        return getCurrentTimestamp();      }    }    // Convert to local time string using system default locale    const localTimeString = date.toLocaleTimeString([], {      hour: 'numeric',      minute: '2-digit',      hour12: true    });    return localTimeString;  } catch (error) {    return getCurrentTimestamp();  }};/** * Format a timestamp for last seen display * Includes relative time information (today, yesterday, etc.) */export const formatLastSeen = (timestamp: string | number | Date): string => {  try {    const date = timestamp instanceof Date ? timestamp : parseTimestamp(timestamp as string | number);    const now = new Date();    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);    const diffInDays = Math.floor(diffInHours / 24);    if (diffInHours < 1) {      return 'Last seen recently';    } else if (diffInHours < 24) {      const timeString = formatTimestamp(date, { hour12: true });      return `Last seen today at ${timeString}`;    } else if (diffInDays === 1) {      const timeString = formatTimestamp(date, { hour12: true });      return `Last seen yesterday at ${timeString}`;    } else if (diffInDays < 7) {      return formatTimestamp(date, { hour12: true, showDate: true });    } else {      return 'Last seen recently';    }  } catch (error) {    return 'Last seen recently';  }};/** * Compare two timestamps for sorting * Returns -1 if a < b, 1 if a > b, 0 if equal */export const compareTimestamps = (a: string | number | Date, b: string | number | Date): number => {  try {    const dateA = a instanceof Date ? a : parseTimestamp(a as string | number);    const dateB = b instanceof Date ? b : parseTimestamp(b as string | number);    const timeA = dateA.getTime();    const timeB = dateB.getTime();    if (isNaN(timeA) || isNaN(timeB)) {      return 0; // If either timestamp is invalid, consider them equal    }    return timeA - timeB;  } catch (error) {    return 0;  }};/** * Get the current timestamp in user's local timezone * Use this when creating new messages to ensure consistency */export const getCurrentTimestamp = (): string => {  // Create a new date and get local time directly  const now = new Date();  // Get local time using system default locale to ensure correct timezone  const localTime = now.toLocaleTimeString([], {    hour: 'numeric',    minute: '2-digit',    hour12: true  });  // Reduced logging for performance  return localTime;};/** * Fix server timestamp - converts server ISO timestamp to local time * Server sends UTC in ISO format, browser automatically converts to local timezone */export const fixServerTimestamp = (serverTimestamp?: string): string => {  if (!serverTimestamp) {    return getCurrentTimestamp();  }  // If server timestamp is already in AM/PM format, return as-is  if (serverTimestamp.includes('AM') || serverTimestamp.includes('PM')) {    return serverTimestamp;  }  // For ISO format or other formats, parse and format to local time  try {    const date = new Date(serverTimestamp);    if (!isNaN(date.getTime())) {      // Browser automatically handles timezone conversion      const formattedTime = date.toLocaleTimeString([], {        hour: 'numeric',        minute: '2-digit',        hour12: true      });      return formattedTime;    }  } catch (error) {    // Silent error handling for performance  }  // Fallback to current time if parsing fails  return getCurrentTimestamp();};/** * Convert server timestamp (assumed to be UTC) to local timestamp string * Use this when receiving timestamps from the server */export const serverTimestampToLocal = (serverTimestamp: string | number): string => {  try {    // Assume server timestamp is in UTC    const serverDate = new Date(serverTimestamp);    return formatMessageTime(serverDate);  } catch (error) {    return getCurrentTimestamp();  }};