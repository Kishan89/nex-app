/** * YouTube utility functions for the frontend */export class YouTubeUtils {  /**   * Extract YouTube video ID from various YouTube URL formats   */  static extractVideoId(url: string): string | null {    const patterns = [      /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&\n?#]+)/,      /(?:https?:\/\/)?(?:www\.)?youtube\.com\/shorts\/([^&\n?#]+)/    ];    for (const pattern of patterns) {      const match = url.match(pattern);      if (match) {        return match[1];      }    }    return null;  }  /**   * Check if a URL is a YouTube URL   */  static isYouTubeUrl(url: string): boolean {    return this.extractVideoId(url) !== null;  }  /**   * Detect YouTube links in text content   */  static detectYouTubeLinks(text: string): Array<{url: string, videoId: string}> {    const urlPattern = /(https?:\/\/(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/|v\/|shorts\/)|youtu\.be\/)[\w\-_]+(?:\S+)?)/gi;    const matches = text.match(urlPattern) || [];    return matches.map(url => ({      url: url.trim(),      videoId: this.extractVideoId(url.trim())!    })).filter(item => item.videoId);  }  /**   * Generate thumbnail URL for a video ID   */  static getThumbnailUrl(videoId: string, quality: 'default' | 'hq' | 'maxres' = 'maxres'): string {    const qualityMap = {      'default': 'default',      'hq': 'hqdefault',       'maxres': 'maxresdefault'    };    return `https://img.youtube.com/vi/${videoId}/${qualityMap[quality]}.jpg`;  }  /**   * Generate YouTube watch URL from video ID   */  static getWatchUrl(videoId: string): string {    return `https://www.youtube.com/watch?v=${videoId}`;  }  /**   * Generate YouTube embed URL from video ID   */  static getEmbedUrl(videoId: string): string {    return `https://www.youtube.com/embed/${videoId}`;  }}export default YouTubeUtils;