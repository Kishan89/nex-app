// lib/ClickableShareService.tsimport { Share, Alert, Clipboard, Linking } from 'react-native';import { MyAppDeepLinkingService } from './myappDeepLinking';/** * Enhanced share service to make myapp:// links more clickable * Different messaging apps handle custom schemes differently */export class ClickableShareService {  /**   * Share with multiple format options to maximize clickability   */  static async shareClickablePost(postId: string, username?: string, content?: string) {    const deepLink = MyAppDeepLinkingService.generatePostLink(postId);    Alert.alert(      'Share Post',      'Choose the best format for your messaging app:',      [        {          text: 'WhatsApp Format',          onPress: () => this.shareForWhatsApp(postId, deepLink, username, content)        },        {          text: 'Telegram Format',           onPress: () => this.shareForTelegram(postId, deepLink, username, content)        },        {          text: 'SMS/Universal',          onPress: () => this.shareUniversal(postId, deepLink, username, content)        },        {          text: 'Copy Link Only',          onPress: () => this.copyRawLink(deepLink)        },        {          text: 'Cancel',          style: 'cancel'        }      ]    );  }  /**   * WhatsApp optimized format   * WhatsApp recognizes custom schemes but prefers certain formats   */  private static async shareForWhatsApp(postId: string, deepLink: string, username?: string, content?: string) {    try {      const title = username ? `Check out @${username}'s post` : 'Check out this post';      const preview = content ? `\n\n"${content.slice(0, 80)}${content.length > 80 ? '...' : ''}"\n` : '\n';      // Format that works well in WhatsApp      const message = `${title}${preview}\n🔗 Open in app:\n${deepLink}`;      await Share.share({        message: message,        title: title,      });      } catch (error) {      this.fallbackShare(deepLink);    }  }  /**   * Telegram optimized format   * Telegram handles custom schemes well with proper formatting   */  private static async shareForTelegram(postId: string, deepLink: string, username?: string, content?: string) {    try {      const title = username ? `📱 Post by @${username}` : '📱 Check out this post';      const preview = content ? `\n\n💬 "${content.slice(0, 100)}${content.length > 100 ? '...' : ''}"\n` : '\n';      // Telegram-friendly format      const message = `${title}${preview}\n🚀 **Open in App**: ${deepLink}`;      await Share.share({        message: message,        title: title,      });      } catch (error) {      this.fallbackShare(deepLink);    }  }  /**   * Universal format for SMS, Email, Discord, etc.   */  private static async shareUniversal(postId: string, deepLink: string, username?: string, content?: string) {    try {      const title = username ? `Post by ${username}` : 'Check out this post';      const preview = content ? `\n\n"${content.slice(0, 60)}${content.length > 60 ? '...' : ''}"\n` : '\n';      // Simple, universal format      const message = `${title}${preview}\nOpen in app: ${deepLink}\n\n(Install our app if you don't have it yet!)`;      await Share.share({        message: message,        title: title,      });      } catch (error) {      this.fallbackShare(deepLink);    }  }  /**   * Copy just the raw link   */  private static async copyRawLink(deepLink: string) {    try {      await Clipboard.setString(deepLink);      Alert.alert(        'Link Copied! 📋',        `Raw link copied:\n${deepLink}\n\nPaste this anywhere to share. The link should be clickable in most messaging apps.`,        [{ text: 'OK' }]      );    } catch (error) {      }  }  /**   * Fallback share method   */  private static async fallbackShare(deepLink: string) {    try {      await Share.share({        message: deepLink,      });    } catch (error) {      Alert.alert('Error', 'Failed to share. Please try copying the link instead.');    }  }  /**   * Test if the link is clickable by trying to open it   */  static async testLinkClickability(postId: string) {    const deepLink = MyAppDeepLinkingService.generatePostLink(postId);    try {      const canOpen = await Linking.canOpenURL(deepLink);      Alert.alert(        'Link Test Results',        `Deep Link: ${deepLink}\n\nClickable: ${canOpen ? '✅ YES' : '❌ NO'}\n\nIf not clickable, check:\n1. App is installed\n2. Intent filters are correct\n3. Try different messaging apps`,        [          {             text: 'Copy Link',             onPress: () => Clipboard.setString(deepLink)           },          {             text: 'Try Opening',             onPress: () => Linking.openURL(deepLink).catch(err =>               Alert.alert('Failed', 'Could not open link: ' + err.message)            )          },          { text: 'OK' }        ]      );    } catch (error) {      Alert.alert('Test Failed', 'Could not test link clickability');    }  }  /**   * Share with clickability instructions   */  static async shareWithInstructions(postId: string, username?: string, content?: string) {    const deepLink = MyAppDeepLinkingService.generatePostLink(postId);    const title = username ? `Post by @${username}` : 'Check out this post';    const preview = content ? `\n\n"${content.slice(0, 50)}${content.length > 50 ? '...' : ''}"\n` : '\n';    const message = `${title}${preview}\n🔗 ${deepLink}\n\n📱 Tap the link above to open in our app!\n\n(If link doesn't work, copy and paste it in your browser or install our app first)`;    try {      await Share.share({        message: message,        title: 'Share Post',      });    } catch (error) {      this.fallbackShare(deepLink);    }  }  /**   * Debug share - shows all possible formats   */  static showDebugOptions(postId: string, username?: string, content?: string) {    const deepLink = MyAppDeepLinkingService.generatePostLink(postId);    Alert.alert(      'Debug Share Options',      'Choose a debug option:',      [        {          text: 'Test Clickability',          onPress: () => this.testLinkClickability(postId)        },        {          text: 'Share All Formats',          onPress: () => this.shareAllFormats(postId, deepLink, username, content)        },        {          text: 'Raw Link Only',          onPress: () => this.copyRawLink(deepLink)        },        {          text: 'Cancel',          style: 'cancel'        }      ]    );  }  /**   * Share message with all format examples   */  private static async shareAllFormats(postId: string, deepLink: string, username?: string, content?: string) {    const message = `🔗 Deep Link Test - Multiple Formats:1. Raw Link:${deepLink}2. WhatsApp Style:Check out this post! ${deepLink}3. Telegram Style:📱 **Open in App**: ${deepLink}4. Universal Style:Open in app: ${deepLink}Try clicking any of these links to test which format works best in your messaging app!`;    try {      await Share.share({        message: message,        title: 'Deep Link Test - All Formats',      });    } catch (error) {      }  }}