import React, { createContext, useContext, useEffect, useState } from 'react';import { socketService } from '../lib/socketService';// Real-time notification service removed - using clean FCM nowimport { useAuth } from './AuthContext';interface SocketContextType {  isConnected: boolean;  connect: () => Promise<void>;  disconnect: () => void;}const SocketContext = createContext<SocketContextType | undefined>(undefined);export const SocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {  const [isConnected, setIsConnected] = useState(false);  const { user } = useAuth();  const connect = async () => {    if (!user) {      return;    }    try {      await socketService.connect();      setIsConnected(socketService.isSocketConnected());      // Real-time notifications removed - clean FCM handles this now      } catch (error) {      setIsConnected(false);    }  };  const disconnect = () => {    socketService.disconnect();    setIsConnected(false);    };  // Auto-connect when user is authenticated  useEffect(() => {    if (user && !isConnected) {      connect();    } else if (!user && isConnected) {      disconnect();    }  }, [user, isConnected]);  // Check connection status periodically  useEffect(() => {    const interval = setInterval(() => {      const socketConnected = socketService.isSocketConnected();      if (socketConnected !== isConnected) {        setIsConnected(socketConnected);      }    }, 5000);    return () => clearInterval(interval);  }, [isConnected]);  // Cleanup on unmount  useEffect(() => {    return () => {      disconnect();    };  }, []);  return (    <SocketContext.Provider      value={{        isConnected,        connect,        disconnect,      }}    >      {children}    </SocketContext.Provider>  );};export const useSocket = () => {  const context = useContext(SocketContext);  if (!context) {    throw new Error('useSocket must be used within SocketProvider');  }  return context;};export default SocketContext;