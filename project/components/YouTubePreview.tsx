import React, { useState } from 'react';import {  View,  Text,  Image,  TouchableOpacity,  StyleSheet,  Linking,  Alert,  ActivityIndicator,} from 'react-native';import { Play, ExternalLink, Clock } from 'lucide-react-native';import * as WebBrowser from 'expo-web-browser';import { Colors, Spacing, FontSizes, FontWeights, BorderRadius, Shadows } from '@/constants/theme';interface YouTubeData {  videoId: string;  title: string;  author: string;  thumbnail: string;  thumbnailHQ?: string;  duration?: string;  url: string;  embedUrl?: string;  provider: string;}interface YouTubePreviewProps {  youtubeData: YouTubeData;  style?: any;}const YouTubePreview: React.FC<YouTubePreviewProps> = ({ youtubeData, style }) => {  const [imageLoading, setImageLoading] = useState(true);  const [imageError, setImageError] = useState(false);  // Debug logging  const handlePress = async () => {    try {      // Debug logging      // Use WebBrowser for more reliable URL opening      const webUrl = `https://www.youtube.com/watch?v=${youtubeData.videoId}`;      const result = await WebBrowser.openBrowserAsync(webUrl);      if (result.type === 'cancel') {        } else {        }    } catch (error) {      // Try the original URL as fallback      try {        const result = await WebBrowser.openBrowserAsync(youtubeData.url);        } catch (fallbackError) {        Alert.alert(          'Cannot Open Link',          'Unable to open YouTube link. Please make sure you have a browser installed and try again.',          [{ text: 'OK' }]        );      }    }  };  const handleImageLoad = () => {    setImageLoading(false);  };  const handleImageError = () => {    setImageLoading(false);    setImageError(true);  };  const getThumbnailUrl = () => {    if (imageError) {      // Fallback to HQ thumbnail if maxres fails      return youtubeData.thumbnailHQ || `https://img.youtube.com/vi/${youtubeData.videoId}/hqdefault.jpg`;    }    return youtubeData.thumbnail;  };  return (    <TouchableOpacity      style={[styles.container, style]}      onPress={handlePress}      activeOpacity={0.8}    >      {/* Thumbnail Container */}      <View style={styles.thumbnailContainer}>        <Image          source={{ uri: getThumbnailUrl() }}          style={styles.thumbnail}          onLoad={handleImageLoad}          onError={handleImageError}          resizeMode="cover"        />        {/* Loading indicator */}        {imageLoading && (          <View style={styles.loadingOverlay}>            <ActivityIndicator size="small" color={Colors.primary} />          </View>        )}        {/* Play button overlay */}        <View style={styles.playOverlay}>          <View style={styles.playButton}>            <Play size={24} color="#fff" fill="#fff" />          </View>        </View>        {/* Duration badge */}        {youtubeData.duration && (          <View style={styles.durationBadge}>            <Clock size={12} color="#fff" />            <Text style={styles.durationText}>{youtubeData.duration}</Text>          </View>        )}        {/* YouTube logo */}        <View style={styles.youtubeBadge}>          <Text style={styles.youtubeText}>YouTube</Text>        </View>      </View>      {/* Content Container */}      <View style={styles.contentContainer}>        <Text style={styles.title} numberOfLines={2}>          {youtubeData.title}        </Text>        <View style={styles.authorContainer}>          <Text style={styles.author} numberOfLines={1}>            {youtubeData.author}          </Text>          <ExternalLink size={14} color={Colors.textMuted} />        </View>      </View>    </TouchableOpacity>  );};const styles = StyleSheet.create({  container: {    backgroundColor: Colors.backgroundSecondary,    borderRadius: BorderRadius.lg,    overflow: 'hidden',    marginVertical: Spacing.sm,    ...Shadows.medium,  },  thumbnailContainer: {    position: 'relative',    aspectRatio: 16 / 9,    backgroundColor: Colors.backgroundTertiary,  },  thumbnail: {    width: '100%',    height: '100%',  },  loadingOverlay: {    position: 'absolute',    top: 0,    left: 0,    right: 0,    bottom: 0,    backgroundColor: Colors.backgroundTertiary,    justifyContent: 'center',    alignItems: 'center',  },  playOverlay: {    position: 'absolute',    top: 0,    left: 0,    right: 0,    bottom: 0,    justifyContent: 'center',    alignItems: 'center',    backgroundColor: 'rgba(0, 0, 0, 0.3)',  },  playButton: {    width: 60,    height: 60,    borderRadius: 30,    backgroundColor: 'rgba(255, 0, 0, 0.9)',    justifyContent: 'center',    alignItems: 'center',    ...Shadows.large,  },  durationBadge: {    position: 'absolute',    bottom: Spacing.xs,    right: Spacing.xs,    backgroundColor: 'rgba(0, 0, 0, 0.8)',    paddingHorizontal: Spacing.xs,    paddingVertical: 2,    borderRadius: BorderRadius.sm,    flexDirection: 'row',    alignItems: 'center',    gap: 2,  },  durationText: {    color: '#fff',    fontSize: FontSizes.xs,    fontWeight: FontWeights.medium,  },  youtubeBadge: {    position: 'absolute',    top: Spacing.xs,    left: Spacing.xs,    backgroundColor: '#FF0000',    paddingHorizontal: Spacing.xs,    paddingVertical: 2,    borderRadius: BorderRadius.sm,  },  youtubeText: {    color: '#fff',    fontSize: FontSizes.xs,    fontWeight: FontWeights.bold,  },  contentContainer: {    padding: Spacing.md,  },  title: {    fontSize: FontSizes.md,    fontWeight: FontWeights.semibold,    color: Colors.text,    lineHeight: 20,    marginBottom: Spacing.xs,  },  authorContainer: {    flexDirection: 'row',    alignItems: 'center',    justifyContent: 'space-between',  },  author: {    fontSize: FontSizes.sm,    color: Colors.textSecondary,    flex: 1,    marginRight: Spacing.xs,  },});export default YouTubePreview;